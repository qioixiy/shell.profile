#!/bin/sh

# private profile

[ -f ~/.profile_helper.sh ] && source ~/.profile_helper.sh

function my_help() {
    cat <<EOF
++git
git log --pretty=format:"%h"
cee50dd
git log --pretty=oneline
aee50d5d7621291b86f628cce4465714d7f9d034 commit log
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
# 下面参数定义列表
'%H': commit hash
'%h': 缩短的commit hash
'%T': tree hash
'%t': 缩短的 tree hash
'%P': parent hashes
'%p': 缩短的 parent hashes
'%an': 作者名字
'%aN': mailmap的作者名字 (.mailmap对应，详情参照git-shortlog(1)或者git-blame(1))
'%ae': 作者邮箱
'%aE': 作者邮箱 (.mailmap对应，详情参照git-shortlog(1)或者git-blame(1))
'%ad': 日期 (--date= 制定的格式)
'%aD': 日期, RFC2822格式
'%ar': 日期, 相对格式(1 day ago)
'%at': 日期, UNIX timestamp
'%ai': 日期, ISO 8601 格式
'%cn': 提交者名字
'%cN': 提交者名字 (.mailmap对应，详情参照git-shortlog(1)或者git-blame(1))
'%ce': 提交者 email
'%cE': 提交者 email (.mailmap对应，详情参照git-shortlog(1)或者git-blame(1))
'%cd': 提交日期 (--date= 制定的格式)
'%cD': 提交日期, RFC2822格式
'%cr': 提交日期, 相对格式(1 day ago)
'%ct': 提交日期, UNIX timestamp
'%ci': 提交日期, ISO 8601 格式
'%d': ref名称
'%e': encoding
'%s': commit信息标题
'%f': sanitized subject line, suitable for a filename
'%b': commit信息内容
'%N': commit notes
'%gD': reflog selector, e.g., refs/stash@{1}
'%gd': shortened reflog selector, e.g., stash@{1}
'%gs': reflog subject
'%Cred': 切换到红色
'%Cgreen': 切换到绿色
'%Cblue': 切换到蓝色
'%Creset': 重设颜色
'%C(...)': 制定颜色, as described in color.branch.* config option
'%m': left, right or boundary mark
'%n': 换行
'%%': a raw %
'%x00': print a byte from a hex code
'%w([[,[,]]])': switch line wrapping, like the -w option of git-shortlog(1).
EOF
}

function my_run_exec_echo()
{
    echo -e "\033[7mrun_exec:\033[0m" $@
    $@
}

function my_run_loop()
{
    while [ true ]; do
        my_run_exec_echo $@
        sleep 1
    done
}
function my_run_until_true()
{
    echo `date`,start
    until $@ ; do
        echo "cmd:$@,restart"
    done
    echo `date`,done
}

function my_findSymbolFromSo() {
    for lib in `ls *`
    do
        cmd="nm ${lib} 2>/dev/null | grep $@"
        res=`eval ${cmd}`
        if [ "" != "$res" ]; then
            echo "$lib"
            echo "$res"
        fi
    done
}

function my_custom_log()
{
    echo $@ >> /tmp/custom_log.log
}

function my_print_list()
{
    for item in $@
    do
        echo $item
    done
}

# $1:dir
function my_get_dir_list()
{
    if [ ! -d $1 ]; then
        return 1;
    fi
    local dir_list=''
    local target_dir=`cd $1 && pwd`
    pushd $target_dir 2>&1 > /dev/null
    for d in `ls`
    do
        # echo $d
        if [ -d $d ]; then
            abs_path=`cd $d 2>/tmp/$$.log  && pwd`
            if [ $? ]; then
                dir_list=$dir_list" $abs_path"
            fi
        fi
    done
    popd 2>&1 > /dev/null
    echo $dir_list
    return 0
}

# $1:dir, $2:level
# print_list `get_dir_list_level . 4`
function my_get_dir_list_level()
{
    local _dir=$1
    local _level=$2

    if [ 1 -eq $_level ]; then
        _list=`my_get_dir_list $_dir`
        echo $_list
        return 0
    fi

    let "_level=$_level-1"
    for __dir in `my_get_dir_list $_dir`
    do
        local __list=`my_get_dir_list_level $__dir $_level`
        echo $__list
    done

    return 0
}

function my_editer() {
    echo emacs
}

function my_editer_client() {
    pgrep emacs > /dev/null 2>&1 || systemctl --user start emacs > /dev/null 2>&1 || emacs --daemon
    echo emacsclient
}

function my_sync() {
    pushd ~
    git pull
    popd

    script=~/myspace/my_sync.sh
    if [ -f $script ]; then
        sh ~/myspace/my_sync.sh
    fi
}

function my_replace_str_current_dir() {
    if [ 2 -ne $# ]; then
        echo usage: my_replace_current_all src dest
        return
    fi
    src=$1
    dest=$2
    sed -i -e "s/${src}/${dest}/g" `grep ${src} -rl ./`
}

function my_plan9port_env() {
    PLAN9=/usr/local/plan9 export PLAN9
    PATH=$PATH:$PLAN9/bin export PATH
}

function my_repeat() {
    COUNTER=$1
    shift

    while [ $COUNTER -gt 0 ]; do
        #echo The counter is $COUNTER
        let COUNTER=COUNTER-1
        my_run_exec_echo $@
    done
}

function my_git_pull_current_dir_repo()
{
    find . -name .git -type d -exec sh -c "cd {}/.. && pwd && git reset --hard && git pull" \;
}

# url: http://alias.sh/
# url: http://www.commandlinefu.com/commands/browse
# url: http://xmodulo.com/useful-online-tools-linux.html
#Productivity
if [ Darwin = "$(uname 2>/dev/null)" ]; then
    alias ls='ls -G'
    alias l='ls -al'
else
    alias ls="ls --color=auto"
    alias l="ls --color -al"
fi
alias grep='grep --color=auto'
mcd() { mkdir -p "$1"; cd "$1";}
cls() { cd "$1"; ls;}
backup() { cp "$1"{,.bak};}
md5check() { md5sum "$1" | grep "$2";}
alias makescript="fc -rnl | head -1 >"
alias genpasswd="strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo"
alias c="clear"
alias histg="history | grep"
alias ..='cd ..'
alias ...='cd ../..'
extract() {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

#System info
alias cmount="mount | column -t"
alias tree="ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'"
sbs(){ du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';}
alias intercept="sudo strace -ff -e trace=write -e write=1,2 -p"
alias meminfo='free -m -l -t'
alias ps?="ps aux | grep"
alias volume="amixer get Master | sed '1,4 d' | cut -d [ -f 2 | cut -d ] -f 1"

#Network
alias websiteget="wget --random-wait -r -p -e robots=off -U mozilla"
alias listen="lsof -P -i -n"
alias port='netstat -tulanp'
gmail() { curl -u "$1" --silent "https://mail.google.com/mail/feed/atom" | sed -e 's/<\/fullcount.*/\n/' | sed -e 's/.*fullcount>//';}
alias ipinfo="curl ifconfig.me && curl ifconfig.me/host"
getlocation() { lynx -dump http://www.ip-adress.com/ip_tracer/?QRY=$1|grep address|egrep 'city|state|country'|awk '{print $3,$4,$5,$6,$7,$8}'|sed 's\ip address flag \\'|sed 's\My\\';}

#Funny
kernelgraph() { lsmod | perl -e 'print "digraph \"lsmod\" {";<>;while(<>){@_=split/\s+/; print "\"$_[0]\" -> \"$_\"\n" for split/,/,$_[3]}print "}"' | dot -Tpng | display -;}
alias busy="cat /dev/urandom | hexdump -C | grep \"ca fe\""

alias e='`my_editer` -nw $@'
alias eq='`my_editer` -nw -q $@'
alias egui='`my_editer` $@'
alias ec='`my_editer_client` -nw -c $@'
alias ecg='`my_editer_client` -c -n $@'
alias ecgui='`my_editer_client` -c $@'
alias ll="ls -l"

# git prompt
## curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -o ~/.git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
export PS1_s0='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\n\$'
export PS1_s1='\[\e[32m\]\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\[\e[31m\]\h: \[\e[36m\]\w\[\e[m\]\033[01;33m$(__git_ps1)\033[01;34m \$\033[00m \t\n\$'
export PS1_s2='\[\e[32m\]\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\[\e[31m\]\h: \[\e[36m\]\w\[\e[m\]\033[01;33m_\033[01;34m \$\033[00m \t\n\$'
export PS1=$PS1_s1
my_switch_PS1() {
    export PS1=$PS1_s2
}

# autojump
[ -f /usr/share/autojump/autojump.sh ] && source /usr/share/autojump/autojump.sh
[ -f /usr/share/autojump/autojump.bash ] && source /usr/share/autojump/autojump.bash
[[ -s $HOME/.autojump/etc/profile.d/autojump.sh ]] && source $HOME/.autojump/etc/profile.d/autojump.sh

if [ Darwin = "$(uname 2>/dev/null)" ]; then
    source ~/.git-completion.bash
    source ~/.git-prompt.sh

    [[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh
fi

# PATH
export PATH=$PATH:~/bin
